const findManyMock = jest.fn();
jest.mock('./../../infrastructure/database/database-client', () => ({
  user: {
    findMany: findManyMock,
  },
}));

import { createUser, getUsers } from './users.controller';

const UsersData = [
  {
    email: 'fakeuser@provider.com',
    name: 'fake user',
  },
  {
    email: 'fakeuser2@provider.com',
    name: 'fake user 2',
  },
];

describe('UsersController - createUser', () => {
  test('should create a new user', async () => {
    findManyMock.mockReturnValue(Promise.resolve(UsersData));
    const userData = {
      email: 'fakeUser',
      name: 'fakeUser@fakerprovider.com',
    };

    const { code, payload } = await createUser({ body: userData });

    expect(code).toEqual(200);
    expect(payload).toMatchObject(UsersData);
  });
});

describe('UsersController - getUsers', () => {
  test('should return success (200) and return all user data', async () => {
    findManyMock.mockReturnValue(Promise.resolve(UsersData));

    const { code, payload } = await getUsers();

    expect(code).toEqual(200);
    expect(payload).toMatchObject(UsersData);
  });
});
